{"name":"Word","tagline":"Java中文分词组件 - word分词","body":"##Java中文分词组件 - word分词\r\n\r\n\r\n\r\n###word分词是一个Java实现的中文分词组件，提供了多种基于词典的分词算法，并利用ngram模型来消除歧义。能准确识别英文、数字，以及日期、时间等数量词，能识别人名、地名、组织机构名等未登录词。同时提供了Lucene、Solr、ElasticSearch插件。\r\n\r\n\r\n\r\n###下载地址：\r\n\t\r\n\t\r\n\t\r\n   [Java中文分词组件word](http://pan.baidu.com/s/1dDziDFz)\r\n\r\n\r\n\r\n###分词使用方法：\r\n\r\n\r\n\r\n\t1、快速体验\r\n\t运行项目根目录下的脚本demo-word.bat可以快速体验分词效果\r\n\t用法: command [text] [input] [output]\r\n\t命令command的可选值为：demo、text、file\r\n\tdemo\r\n\ttext 杨尚川是APDPlat应用级产品开发平台的作者\r\n\tfile d:/text.txt d:/word.txt\r\n\texit\r\n\t\r\n\t2、对文本进行分词\r\n\t移除停用词：List<Word> words = WordSegmenter.seg(\"杨尚川是APDPlat应用级产品开发平台的作者\");\r\n\t保留停用词：List<Word> words = WordSegmenter.segWithStopWords(\"杨尚川是APDPlat应用级产品开发平台的作者\");\r\n\t\t\t\tSystem.out.println(words);\r\n    \r\n    输出：\r\n\t移除停用词：[杨尚川, apdplat, 应用级, 产品, 开发平台, 作者]\r\n\t保留停用词：[杨尚川, 是, apdplat, 应用级, 产品, 开发平台, 的, 作者]\r\n\r\n\t3、对文件进行分词\r\n\tString input = \"d:/text.txt\";\r\n\tString output = \"d:/word.txt\";\r\n\t移除停用词：WordSegmenter.seg(new File(input), new File(output));\r\n\t保留停用词：WordSegmenter.segWithStopWords(new File(input), new File(output));\r\n\t\r\n\t4、自定义配置文件\r\n\t默认配置文件为类路径下的word.conf，打包在word-x.x.jar中\r\n\t自定义配置文件为类路径下的word.local.conf，需要用户自己提供\r\n\t如果自定义配置和默认配置相同，自定义配置会覆盖默认配置\r\n\t配置文件编码为UTF-8\r\n\t\t\r\n\t5、自定义用户词库\r\n\t自定义用户词库为一个或多个文件夹或文件，可以使用绝对路径或相对路径\r\n\t用户词库由多个词典文件组成，文件编码为UTF-8\r\n\t词典文件的格式为文本文件，一行代表一个词\r\n\t可以通过系统属性或配置文件的方式来指定路径，多个路径之间用逗号分隔开\r\n\t类路径下的词典文件，需要在相对路径前加入前缀classpath:\r\n\t\t\r\n\t指定方式有三种：\r\n\t\t指定方式一，编程指定（高优先级）：\r\n\t\t\tWordConfTools.set(\"dic.path\", \"classpath:dic.txt，d:/custom_dic\");\r\n\t\t\tDictionaryFactory.reload();//更改词典路径之后，重新加载词典\r\n\t\t指定方式二，Java虚拟机启动参数（中优先级）：\r\n\t\t\tjava -Ddic.path=classpath:dic.txt，d:/custom_dic\r\n\t\t指定方式三，配置文件指定（低优先级）：\r\n\t\t\t使用类路径下的文件word.local.conf来指定配置信息\r\n\t\t\tdic.path=classpath:dic.txt，d:/custom_dic\r\n \t\r\n\t如未指定，则默认使用类路径下的dic.txt词典文件\r\n\t\r\n\t6、自定义停用词词库\r\n\t使用方式和自定义用户词库类似，配置项为：\r\n\tstopwords.path=classpath:stopwords.txt，d:/custom_stopwords_dic\r\n\t\t\r\n\t7、自动检测词库变化\r\n\t可以自动检测自定义用户词库和自定义停用词词库的变化\r\n\t包含类路径下的文件和文件夹、非类路径下的绝对路径和相对路径\r\n\t如：\r\n\tclasspath:dic.txt，classpath:custom_dic_dir,\r\n\td:/dic_more.txt，d:/DIC_DIR，D:/DIC2_DIR，my_dic_dir，my_dic_file.txt\r\n\t\r\n\tclasspath:stopwords.txt，classpath:custom_stopwords_dic_dir，\r\n\td:/stopwords_more.txt，d:/STOPWORDS_DIR，d:/STOPWORDS2_DIR，stopwords_dir，remove.txt\r\n\t\r\n\t8、显式指定分词算法\r\n\t对文本进行分词时，可显式指定特定的分词算法，如：\r\n\tWordSegmenter.seg(\"APDPlat应用级产品开发平台\", SegmentationAlgorithm.BidirectionalMaximumMatching);\r\n\t\r\n\tSegmentationAlgorithm的可选类型为：\t \r\n\t正向最大匹配算法：MaximumMatching\r\n\t逆向最大匹配算法：ReverseMaximumMatching\r\n\t正向最小匹配算法：MinimumMatching\r\n\t逆向最小匹配算法：ReverseMinimumMatching\r\n\t双向最大匹配算法：BidirectionalMaximumMatching\r\n\t双向最小匹配算法：BidirectionalMinimumMatching\r\n\t双向最大最小匹配算法：BidirectionalMaximumMinimumMatching\r\n\t全切分算法：FullSegmentation\r\n\t\r\n\t9、分词效果评估\r\n\t运行项目根目录下的脚本evaluation.bat可以对分词效果进行评估\r\n\t评估采用的测试文本有253 3709行，共2837 4490个字符\r\n\t评估结果位于target/evaluation目录下：\r\n\tcorpus-text.txt为分好词的人工标注文本，词之间以空格分隔\r\n\ttest-text.txt为测试文本，是把corpus-text.txt以标点符号分隔为多行的结果\r\n\tstandard-text.txt为测试文本对应的人工标注文本，作为分词是否正确的标准\r\n\tresult-text-***.txt，***为各种分词算法名称，这是word分词结果\r\n\tperfect-result-***.txt，***为各种分词算法名称，这是分词结果和人工标注标准完全一致的文本\r\n\twrong-result-***.txt，***为各种分词算法名称，这是分词结果和人工标注标准不一致的文本\r\n\r\n\t\r\n\t\r\n###分词算法效果评估：\r\n\r\n\r\n\r\n\t1：\r\n\tword分词 全切分算法：\r\n\t分词速度：39.137066 字符/毫秒\r\n\t行数完美率：58.79%  行数错误率：41.2%  总的行数：2533709  完美行数：1489713  错误行数：1043996\r\n\t字数完美率：49.53% 字数错误率：50.46% 总的字数：28374490 完美字数：14054431 错误字数：14320059\r\n\r\n\t2：\r\n\tword分词 双向最大最小匹配算法：\r\n\t分词速度：165.62856 字符/毫秒\r\n\t行数完美率：55.31%  行数错误率：44.68%  总的行数：2533709  完美行数：1401582  错误行数：1132127\r\n\t字数完美率：45.83% 字数错误率：54.16% 总的字数：28374490 完美字数：13005696 错误字数：15368794\r\n\r\n\t3：\r\n\tword分词 双向最大匹配算法：\r\n\t分词速度：294.0575 字符/毫秒\r\n\t行数完美率：52.01%  行数错误率：47.98%  总的行数：2533709  完美行数：1317801  错误行数：1215908\r\n\t字数完美率：42.42% 字数错误率：57.57% 总的字数：28374490 完美字数：12038414 错误字数：16336076\r\n\r\n\t4：\r\n\tword分词 双向最小匹配算法：\r\n\t分词速度：359.53485 字符/毫秒\r\n\t行数完美率：46.76%  行数错误率：53.23%  总的行数：2533709  完美行数：1185013  错误行数：1348696\r\n\t字数完美率：36.52% 字数错误率：63.47% 总的字数：28374490 完美字数：10365168 错误字数：18009322\r\n\r\n\t5：\r\n\tword分词 逆向最大匹配算法：\r\n\t分词速度：589.02454 字符/毫秒\r\n\t行数完美率：46.72%  行数错误率：53.27%  总的行数：2533709  完美行数：1183913  错误行数：1349796\r\n\t字数完美率：36.67% 字数错误率：63.32% 总的字数：28374490 完美字数：10407342 错误字数：17967148\r\n\r\n\t6：\r\n\tword分词 正向最大匹配算法：\r\n\t分词速度：727.83093 字符/毫秒\r\n\t行数完美率：46.66%  行数错误率：53.33%  总的行数：2533709  完美行数：1182351  错误行数：1351358\r\n\t字数完美率：36.73% 字数错误率：63.26% 总的字数：28374490 完美字数：10422209 错误字数：17952281\r\n\r\n\t7：\r\n\tword分词 逆向最小匹配算法：\r\n\t分词速度：1049.5465 字符/毫秒\r\n\t行数完美率：41.78%  行数错误率：58.21%  总的行数：2533709  完美行数：1058606  错误行数：1475103\r\n\t字数完美率：31.68% 字数错误率：68.31% 总的字数：28374490 完美字数：8989797 错误字数：19384693\r\n\r\n\t8：\r\n\tword分词 正向最小匹配算法：\r\n\t分词速度：1097.0651 字符/毫秒\r\n\t行数完美率：36.85%  行数错误率：63.14%  总的行数：2533709  完美行数：933769  错误行数：1599940\r\n\t字数完美率：26.85% 字数错误率：73.14% 总的字数：28374490 完美字数：7621334 错误字数：20753156\r\n\t\r\n\r\n\t\r\n###Lucene插件：\r\n\r\n\r\n\r\n\t1、构造一个word分析器ChineseWordAnalyzer\r\n    Analyzer analyzer = new ChineseWordAnalyzer();\r\n\t\r\n\t2、利用word分析器切分文本\r\n\tTokenStream tokenStream = analyzer.tokenStream(\"text\", \"杨尚川是APDPlat应用级产品开发平台的作者\");\r\n\twhile(tokenStream.incrementToken()){\r\n\t\tCharTermAttribute charTermAttribute = tokenStream.getAttribute(CharTermAttribute.class);\r\n\t\tOffsetAttribute offsetAttribute = tokenStream.getAttribute(OffsetAttribute.class);\r\n\t\tSystem.out.println(charTermAttribute.toString()+\" \"+offsetAttribute.startOffset());\r\n\t}\r\n\t\r\n\t3、利用word分析器建立Lucene索引\r\n\tDirectory directory = new RAMDirectory();\r\n\tIndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_47, analyzer);\r\n\tIndexWriter indexWriter = new IndexWriter(directory, config);\r\n\t\r\n\t4、利用word分析器查询Lucene索引\r\n\tQueryParser queryParser = new QueryParser(Version.LUCENE_47, \"text\", analyzer);\r\n\tQuery query = queryParser.parse(\"text:杨尚川\");\r\n\tTopDocs docs = indexSearcher.search(query, Integer.MAX_VALUE);\r\n\t\r\n\r\n\r\n###Solr插件：\r\n\r\n    \r\n\t\r\n\t1、生成分词组件二进制jar\r\n\t执行 mvn clean install 生成word中文分词组件target/word-1.0.jar\r\n\t\r\n\t2、创建目录solr-4.7.1/example/solr/lib，将target/word-1.0.jar文件复制到lib目录\r\n\t\r\n\t3、配置schema指定分词器\r\n\t将solr-4.7.1/example/solr/collection1/conf/schema.xml文件中所有的\r\n\t<tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>和\r\n\t<tokenizer class=\"solr.StandardTokenizerFactory\"/>全部替换为\r\n\t<tokenizer class=\"org.apdplat.word.solr.ChineseWordTokenizerFactory\"/>\r\n\t并移除所有的filter标签\r\n\t\r\n\t4、如果需要使用特定的分词算法：\r\n\t<tokenizer class=\"org.apdplat.word.solr.ChineseWordTokenizerFactory\" segAlgorithm=\"ReverseMinimumMatching\"/>\r\n\tsegAlgorithm可选值有：\t \r\n\t正向最大匹配算法：MaximumMatching\r\n\t逆向最大匹配算法：ReverseMaximumMatching\r\n\t正向最小匹配算法：MinimumMatching\r\n\t逆向最小匹配算法：ReverseMinimumMatching\r\n\t双向最大匹配算法：BidirectionalMaximumMatching\r\n\t双向最小匹配算法：BidirectionalMinimumMatching\r\n\t双向最大最小匹配算法：BidirectionalMaximumMinimumMatching\r\n\t全切分算法：FullSegmentation\r\n\t如不指定，默认使用双向最大匹配算法：BidirectionalMaximumMatching\r\n\t\r\n\t5、如果需要指定特定的配置文件：\r\n\t<tokenizer class=\"org.apdplat.word.solr.ChineseWordTokenizerFactory\" segAlgorithm=\"ReverseMinimumMatching\"\r\n\t\t\tconf=\"C:/solr-4.7.0/example/solr/nutch/conf/word.local.conf\"/>\r\n\tword.local.conf文件中可配置的内容见 word-1.0.jar 中的word.conf文件\r\n\t如不指定，使用默认配置文件，位于 word-1.0.jar 中的word.conf文件\r\n\r\n\t\r\n\t\r\n###ElasticSearch插件：\r\n\r\n    \r\n\t\r\n\t1、执行命令： mvn clean install dependency:copy-dependencies\r\n\t\r\n\t2、创建目录elasticsearch-1.1.0/plugins/word\r\n\t\r\n\t3、将中文分词库文件target/word-1.0.jar和依赖的日志库文件\t\r\n\t\ttarget/dependency/slf4j-api-1.6.4.jar\r\n\t\ttarget/dependency/logback-core-0.9.28.jar\r\n\t\ttarget/dependency/logback-classic-0.9.28.jar\t\r\n\t\t复制到刚创建的word目录\r\n\r\n\t4、修改文件elasticsearch-1.1.0/config/elasticsearch.yml，新增如下配置：\t\r\n\t\tindex.analysis.analyzer.default.type : \"word\"\r\n\t\tindex.analysis.tokenizer.default.type : \"word\"\r\n\t\r\n\t5、启动ElasticSearch测试效果，在Chrome浏览器中访问：\t\r\n\t\thttp://localhost:9200/_analyze?analyzer=word&text=杨尚川是APDPlat应用级产品开发平台的作者\r\n\t\t\r\n\t6、自定义配置\r\n\t\t从word-1.0.jar中提取配置文件word.conf，改名为word.local.conf，放到elasticsearch-1.1.0/plugins/word目录下\r\n\t\t\r\n\t7、指定分词算法\r\n\t\t修改文件elasticsearch-1.1.0/config/elasticsearch.yml，新增如下配置：\r\n\t\tindex.analysis.analyzer.default.segAlgorithm : \"ReverseMinimumMatching\"\r\n\t\tindex.analysis.tokenizer.default.segAlgorithm : \"ReverseMinimumMatching\"\r\n\t\t\r\n\t\t这里segAlgorithm可指定的值有：\r\n\t\t正向最大匹配算法：MaximumMatching\r\n\t\t逆向最大匹配算法：ReverseMaximumMatching\r\n\t\t正向最小匹配算法：MinimumMatching\r\n\t\t逆向最小匹配算法：ReverseMinimumMatching\r\n\t\t双向最大匹配算法：BidirectionalMaximumMatching\r\n\t\t双向最小匹配算法：BidirectionalMinimumMatching\r\n\t\t双向最大最小匹配算法：BidirectionalMaximumMinimumMatching\r\n\t\t全切分算法：FullSegmentation\r\n\t\t如不指定，默认使用双向最大匹配算法：BidirectionalMaximumMatching\r\n\t\r\n\t\r\n\t\t\r\n###词向量：\r\n\r\n\r\n\r\n\t从大规模语料中统计一个词的上下文相关词，并用这些上下文相关词组成的向量来表达这个词。\r\n\t通过计算词向量的相似性，即可得到词的相似性。\r\n\t相似性的假设是建立在如果两个词的上下文相关词越相似，那么这两个词就越相似这个前提下的。\r\n\t\r\n\t通过运行项目根目录下的脚本demo-word-vector-corpus.bat来体验word项目自带语料库的效果\r\n\t\r\n\t如果有自己的文本内容，可以使用脚本demo-word-vector-file.bat来对文本分词、建立词向量、计算相似性\r\n\t\r\n\r\n\t\r\n###分词算法文章：\r\n\r\n\r\n    \r\n   [1、中文分词算法 之 基于词典的正向最大匹配算法](http://yangshangchuan.iteye.com/blog/2031813)\r\n    \r\n   [2、中文分词算法 之 基于词典的逆向最大匹配算法](http://yangshangchuan.iteye.com/blog/2033843)\r\n    \r\n   [3、中文分词算法 之 词典机制性能优化与测试](http://yangshangchuan.iteye.com/blog/2035007)\r\n   \r\n   [4、中文分词算法 之 基于词典的正向最小匹配算法](http://yangshangchuan.iteye.com/blog/2040423)\r\n   \r\n   [5、中文分词算法 之 基于词典的逆向最小匹配算法](http://yangshangchuan.iteye.com/blog/2040431)\r\n   \r\n   [6、Java开源项目cws_evaluation：中文分词器分词效果评估](https://github.com/ysc/cws_evaluation/)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}